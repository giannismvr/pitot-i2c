
pitot_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800360c  0800360c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800360c  0800360c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800360c  0800360c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0000460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003614  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08003620  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003620  000051b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0aa  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e4  00000000  00000000  000140df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000165c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c52  00000000  00000000  00017580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001895c  00000000  00000000  000181d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f75  00000000  00000000  00030b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092164  00000000  00000000  00042aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000d4c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d8f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035c8 	.word	0x080035c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080035c8 	.word	0x080035c8

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000152:	f000 fc13 	bl	800097c <HAL_Init>
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 SystemClock_Config();
 8000156:	f000 f849 	bl	80001ec <SystemClock_Config>
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 800015a:	f000 f9ef 	bl	800053c <MX_GPIO_Init>
 MX_DMA_Init();
 800015e:	f000 f9cf 	bl	8000500 <MX_DMA_Init>
 MX_CAN_Init();
 8000162:	f000 f8dd 	bl	8000320 <MX_CAN_Init>
 MX_I2C1_Init();
 8000166:	f000 f94d 	bl	8000404 <MX_I2C1_Init>
 MX_TIM4_Init();
 800016a:	f000 f979 	bl	8000460 <MX_TIM4_Init>
 MX_ADC1_Init();
 800016e:	f000 f899 	bl	80002a4 <MX_ADC1_Init>
 /* USER CODE BEGIN 2 */
//#if (FUNCTION == I2C_PITOT)
//  MS45x5DOInitialization(&msDP,0x28,0,DPUpperRange,DPLowerRange,WriteToDP,ReadFromDP,HAL_Delay);
//#endif
 HAL_Delay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000176:	f000 fc63 	bl	8000a40 <HAL_Delay>
 //HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,ADC_BUF_LEN);
 uint8_t r = 1.2047; //1.1.1687; grammars/liter
 800017a:	2301      	movs	r3, #1
 800017c:	71fb      	strb	r3, [r7, #7]
 while (1)
 {
   /* USER CODE END WHILE */
   /* USER CODE BEGIN 3 */
	  //--------------------------------------------------------------------------------delete from here
	  	  	  TxHeader.StdId = 0x499;
 800017e:	4b16      	ldr	r3, [pc, #88]	@ (80001d8 <main+0x8c>)
 8000180:	f240 4299 	movw	r2, #1177	@ 0x499
 8000184:	601a      	str	r2, [r3, #0]
			  TxData[0]=69;
 8000186:	4b15      	ldr	r3, [pc, #84]	@ (80001dc <main+0x90>)
 8000188:	2245      	movs	r2, #69	@ 0x45
 800018a:	701a      	strb	r2, [r3, #0]
			  TxData[1]= 54;    //ayto to kanoume genika epd to canbus stelnei mono integers kai oxi floats
 800018c:	4b13      	ldr	r3, [pc, #76]	@ (80001dc <main+0x90>)
 800018e:	2236      	movs	r2, #54	@ 0x36
 8000190:	705a      	strb	r2, [r3, #1]
	     	  TxData[2]= 54;   //opote tis kanoume convert se integers kai meta tis stelnoume
 8000192:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <main+0x90>)
 8000194:	2236      	movs	r2, #54	@ 0x36
 8000196:	709a      	strb	r2, [r3, #2]
	     	  TxData[3]= 54;
 8000198:	4b10      	ldr	r3, [pc, #64]	@ (80001dc <main+0x90>)
 800019a:	2236      	movs	r2, #54	@ 0x36
 800019c:	70da      	strb	r2, [r3, #3]
	     	  TxData[4]= 54; //kaneis >>8 epd exeis uint16_t kai ara kaneis shift 8 theseis dejia
 800019e:	4b0f      	ldr	r3, [pc, #60]	@ (80001dc <main+0x90>)
 80001a0:	2236      	movs	r2, #54	@ 0x36
 80001a2:	711a      	strb	r2, [r3, #4]
	     	  TxData[5]= 54;
 80001a4:	4b0d      	ldr	r3, [pc, #52]	@ (80001dc <main+0x90>)
 80001a6:	2236      	movs	r2, #54	@ 0x36
 80001a8:	715a      	strb	r2, [r3, #5]
	     	  TxData[6]= 0;
 80001aa:	4b0c      	ldr	r3, [pc, #48]	@ (80001dc <main+0x90>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	719a      	strb	r2, [r3, #6]
	     	  TxData[7]= 0;
 80001b0:	4b0a      	ldr	r3, [pc, #40]	@ (80001dc <main+0x90>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	71da      	strb	r2, [r3, #7]
	     	 if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <main+0x94>)
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <main+0x90>)
 80001ba:	4907      	ldr	r1, [pc, #28]	@ (80001d8 <main+0x8c>)
 80001bc:	4809      	ldr	r0, [pc, #36]	@ (80001e4 <main+0x98>)
 80001be:	f001 f957 	bl	8001470 <HAL_CAN_AddTxMessage>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0da      	beq.n	800017e <main+0x32>
	     	     		  error_cnt++;;
 80001c8:	4b07      	ldr	r3, [pc, #28]	@ (80001e8 <main+0x9c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	3301      	adds	r3, #1
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b05      	ldr	r3, [pc, #20]	@ (80001e8 <main+0x9c>)
 80001d2:	801a      	strh	r2, [r3, #0]
	  	  	  TxHeader.StdId = 0x499;
 80001d4:	e7d3      	b.n	800017e <main+0x32>
 80001d6:	bf00      	nop
 80001d8:	20000164 	.word	0x20000164
 80001dc:	200001a4 	.word	0x200001a4
 80001e0:	20000198 	.word	0x20000198
 80001e4:	2000009c 	.word	0x2000009c
 80001e8:	20000160 	.word	0x20000160

080001ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	@ 0x50
 80001f0:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f9b8 	bl	8003570 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
 RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fa82 	bl	800274c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
 {
   Error_Handler();
 800024e:	f000 f9b5 	bl	80005bc <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000262:	623b      	str	r3, [r7, #32]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	@ 0x24
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fcee 	bl	8002c50 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
 {
   Error_Handler();
 800027a:	f000 f99f 	bl	80005bc <Error_Handler>
 }
 PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
 PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000286:	60fb      	str	r3, [r7, #12]
 if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe5a 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xae>
 {
   Error_Handler();
 8000296:	f000 f991 	bl	80005bc <Error_Handler>
 }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	@ 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN ADC1_Init 0 */
 /* USER CODE END ADC1_Init 0 */
 ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 /* USER CODE BEGIN ADC1_Init 1 */
 /* USER CODE END ADC1_Init 1 */
 /** Common config
 */
 hadc1.Instance = ADC1;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002b6:	4a19      	ldr	r2, [pc, #100]	@ (800031c <MX_ADC1_Init+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]
 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ba:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
 hadc1.Init.ContinuousConvMode = ENABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	731a      	strb	r2, [r3, #12]
 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c6:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	751a      	strb	r2, [r3, #20]
 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002d2:	61da      	str	r2, [r3, #28]
 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
 hadc1.Init.NbrOfConversion = 1;
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	611a      	str	r2, [r3, #16]
 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002e2:	f000 fbd1 	bl	8000a88 <HAL_ADC_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x4c>
 {
   Error_Handler();
 80002ec:	f000 f966 	bl	80005bc <Error_Handler>
 }
 /** Configure Regular Channel
 */
 sConfig.Channel = ADC_CHANNEL_2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	607b      	str	r3, [r7, #4]
 sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
 sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_ADC1_Init+0x74>)
 8000302:	f000 fd6b 	bl	8000ddc <HAL_ADC_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x6c>
 {
   Error_Handler();
 800030c:	f000 f956 	bl	80005bc <Error_Handler>
 }
 /* USER CODE BEGIN ADC1_Init 2 */
 /* USER CODE END ADC1_Init 2 */
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000028 	.word	0x20000028
 800031c:	40012400 	.word	0x40012400

08000320 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08a      	sub	sp, #40	@ 0x28
 8000324:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN CAN_Init 0 */
 /* USER CODE END CAN_Init 0 */
 /* USER CODE BEGIN CAN_Init 1 */
 /* USER CODE END CAN_Init 1 */
 hcan.Instance = CAN1;
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000328:	4a33      	ldr	r2, [pc, #204]	@ (80003f8 <MX_CAN_Init+0xd8>)
 800032a:	601a      	str	r2, [r3, #0]
 hcan.Init.Prescaler = 4;
 800032c:	4b31      	ldr	r3, [pc, #196]	@ (80003f4 <MX_CAN_Init+0xd4>)
 800032e:	2204      	movs	r2, #4
 8000330:	605a      	str	r2, [r3, #4]
 hcan.Init.Mode = CAN_MODE_NORMAL;
 8000332:	4b30      	ldr	r3, [pc, #192]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
 hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000338:	4b2e      	ldr	r3, [pc, #184]	@ (80003f4 <MX_CAN_Init+0xd4>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
 hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800033e:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000340:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000344:	611a      	str	r2, [r3, #16]
 hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000346:	4b2b      	ldr	r3, [pc, #172]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000348:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800034c:	615a      	str	r2, [r3, #20]
 hcan.Init.TimeTriggeredMode = DISABLE;
 800034e:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000350:	2200      	movs	r2, #0
 8000352:	761a      	strb	r2, [r3, #24]
 hcan.Init.AutoBusOff = DISABLE;
 8000354:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000356:	2200      	movs	r2, #0
 8000358:	765a      	strb	r2, [r3, #25]
 hcan.Init.AutoWakeUp = DISABLE;
 800035a:	4b26      	ldr	r3, [pc, #152]	@ (80003f4 <MX_CAN_Init+0xd4>)
 800035c:	2200      	movs	r2, #0
 800035e:	769a      	strb	r2, [r3, #26]
 hcan.Init.AutoRetransmission = DISABLE;
 8000360:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000362:	2200      	movs	r2, #0
 8000364:	76da      	strb	r2, [r3, #27]
 hcan.Init.ReceiveFifoLocked = DISABLE;
 8000366:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
 hcan.Init.TransmitFifoPriority = DISABLE;
 800036c:	4b21      	ldr	r3, [pc, #132]	@ (80003f4 <MX_CAN_Init+0xd4>)
 800036e:	2200      	movs	r2, #0
 8000370:	775a      	strb	r2, [r3, #29]
 if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000372:	4820      	ldr	r0, [pc, #128]	@ (80003f4 <MX_CAN_Init+0xd4>)
 8000374:	f000 fe74 	bl	8001060 <HAL_CAN_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_CAN_Init+0x62>
 {
   Error_Handler();
 800037e:	f000 f91d 	bl	80005bc <Error_Handler>
 }
 /* USER CODE BEGIN CAN_Init 2 */
 CAN_FilterTypeDef canfilterconfig;
   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000382:	2301      	movs	r3, #1
 8000384:	623b      	str	r3, [r7, #32]
   canfilterconfig.FilterBank = 10;
 8000386:	230a      	movs	r3, #10
 8000388:	617b      	str	r3, [r7, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
   canfilterconfig.FilterIdHigh = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	603b      	str	r3, [r7, #0]
   canfilterconfig.FilterIdLow = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
   canfilterconfig.FilterMaskIdHigh =0;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
   canfilterconfig.FilterMaskIdLow = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003a2:	2301      	movs	r3, #1
 80003a4:	61fb      	str	r3, [r7, #28]
   canfilterconfig.SlaveStartFilterBank = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	@ 0x24
   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80003aa:	463b      	mov	r3, r7
 80003ac:	4619      	mov	r1, r3
 80003ae:	4811      	ldr	r0, [pc, #68]	@ (80003f4 <MX_CAN_Init+0xd4>)
 80003b0:	f000 ff51 	bl	8001256 <HAL_CAN_ConfigFilter>
   HAL_CAN_Start(&hcan);
 80003b4:	480f      	ldr	r0, [pc, #60]	@ (80003f4 <MX_CAN_Init+0xd4>)
 80003b6:	f001 f817 	bl	80013e8 <HAL_CAN_Start>
   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003ba:	2102      	movs	r1, #2
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <MX_CAN_Init+0xd4>)
 80003be:	f001 fa47 	bl	8001850 <HAL_CAN_ActivateNotification>
   TxHeader.DLC = 8;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_CAN_Init+0xdc>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	611a      	str	r2, [r3, #16]
   TxHeader.IDE = CAN_ID_STD;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_CAN_Init+0xdc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_CAN_Init+0xdc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
   TxHeader.TransmitGlobalTime = DISABLE;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_CAN_Init+0xdc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
//
		RxHeader.DLC = 8;
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_CAN_Init+0xe0>)
 80003dc:	2208      	movs	r2, #8
 80003de:	611a      	str	r2, [r3, #16]
		RxHeader.IDE = CAN_ID_STD;
 80003e0:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <MX_CAN_Init+0xe0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
       RxHeader.RTR = CAN_RTR_DATA;
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_CAN_Init+0xe0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
       //RxHeader.ReceiveGlobalTime = DISABLE;
 /* USER CODE END CAN_Init 2 */
}
 80003ec:	bf00      	nop
 80003ee:	3728      	adds	r7, #40	@ 0x28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000009c 	.word	0x2000009c
 80003f8:	40006400 	.word	0x40006400
 80003fc:	20000164 	.word	0x20000164
 8000400:	2000017c 	.word	0x2000017c

08000404 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN I2C1_Init 0 */
 /* USER CODE END I2C1_Init 0 */
 /* USER CODE BEGIN I2C1_Init 1 */
 /* USER CODE END I2C1_Init 1 */
 hi2c1.Instance = I2C1;
 8000408:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <MX_I2C1_Init+0x50>)
 800040a:	4a13      	ldr	r2, [pc, #76]	@ (8000458 <MX_I2C1_Init+0x54>)
 800040c:	601a      	str	r2, [r3, #0]
 hi2c1.Init.ClockSpeed = 100000;
 800040e:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000410:	4a12      	ldr	r2, [pc, #72]	@ (800045c <MX_I2C1_Init+0x58>)
 8000412:	605a      	str	r2, [r3, #4]
 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
 hi2c1.Init.OwnAddress1 = 0;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_I2C1_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000422:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000426:	611a      	str	r2, [r3, #16]
 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <MX_I2C1_Init+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
 hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000434:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_I2C1_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
 if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	@ (8000454 <MX_I2C1_Init+0x50>)
 8000442:	f002 f83f 	bl	80024c4 <HAL_I2C_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_I2C1_Init+0x4c>
 {
   Error_Handler();
 800044c:	f000 f8b6 	bl	80005bc <Error_Handler>
 }
 /* USER CODE BEGIN I2C1_Init 2 */
 /* USER CODE END I2C1_Init 2 */
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000c4 	.word	0x200000c4
 8000458:	40005400 	.word	0x40005400
 800045c:	000186a0 	.word	0x000186a0

08000460 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIM4_Init 0 */
 /* USER CODE END TIM4_Init 0 */
 TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
 TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 /* USER CODE BEGIN TIM4_Init 1 */
 /* USER CODE END TIM4_Init 1 */
 htim4.Instance = TIM4;
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_TIM4_Init+0x98>)
 8000480:	4a1e      	ldr	r2, [pc, #120]	@ (80004fc <MX_TIM4_Init+0x9c>)
 8000482:	601a      	str	r2, [r3, #0]
 htim4.Init.Prescaler = 0;
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_TIM4_Init+0x98>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <MX_TIM4_Init+0x98>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
 htim4.Init.Period = 65535;
 8000490:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <MX_TIM4_Init+0x98>)
 8000492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000496:	60da      	str	r2, [r3, #12]
 htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <MX_TIM4_Init+0x98>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049e:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_TIM4_Init+0x98>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
 if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004a4:	4814      	ldr	r0, [pc, #80]	@ (80004f8 <MX_TIM4_Init+0x98>)
 80004a6:	f002 fe03 	bl	80030b0 <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM4_Init+0x54>
 {
   Error_Handler();
 80004b0:	f000 f884 	bl	80005bc <Error_Handler>
 }
 sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80004b4:	2307      	movs	r3, #7
 80004b6:	60fb      	str	r3, [r7, #12]
 sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
 if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4619      	mov	r1, r3
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <MX_TIM4_Init+0x98>)
 80004c4:	f002 fe43 	bl	800314e <HAL_TIM_SlaveConfigSynchro>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM4_Init+0x72>
 {
   Error_Handler();
 80004ce:	f000 f875 	bl	80005bc <Error_Handler>
 }
 sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <MX_TIM4_Init+0x98>)
 80004e0:	f002 ffe8 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM4_Init+0x8e>
 {
   Error_Handler();
 80004ea:	f000 f867 	bl	80005bc <Error_Handler>
 }
 /* USER CODE BEGIN TIM4_Init 2 */
 /* USER CODE END TIM4_Init 2 */
}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000118 	.word	0x20000118
 80004fc:	40000800 	.word	0x40000800

08000500 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 /* DMA controller clock enable */
 __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_DMA_Init+0x38>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a0b      	ldr	r2, [pc, #44]	@ (8000538 <MX_DMA_Init+0x38>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_DMA_Init+0x38>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 /* DMA interrupt init */
 /* DMA1_Channel1_IRQn interrupt configuration */
 HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	200b      	movs	r0, #11
 8000524:	f001 fcb3 	bl	8001e8e <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000528:	200b      	movs	r0, #11
 800052a:	f001 fccc 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a13      	ldr	r2, [pc, #76]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_GPIO_Init+0x58>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <MX_GPIO_Init+0x58>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 f831 	bl	800160e <HAL_CAN_GetRxMessage>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000019c 	.word	0x2000019c
 80005b8:	2000017c 	.word	0x2000017c

080005bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x5c>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x60>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_MspInit+0x60>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a2c      	ldr	r2, [pc, #176]	@ (80006f8 <HAL_ADC_MspInit+0xcc>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d151      	bne.n	80006f0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064c:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a2a      	ldr	r2, [pc, #168]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 8000652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <HAL_ADC_MspInit+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067c:	2304      	movs	r3, #4
 800067e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	481d      	ldr	r0, [pc, #116]	@ (8000700 <HAL_ADC_MspInit+0xd4>)
 800068c:	f001 fd96 	bl	80021bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 8000692:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <HAL_ADC_MspInit+0xdc>)
 8000694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006c6:	f001 fc19 	bl	8001efc <HAL_DMA_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006d0:	f7ff ff74 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006d8:	621a      	str	r2, [r3, #32]
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <HAL_ADC_MspInit+0xd8>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2012      	movs	r0, #18
 80006e6:	f001 fbd2 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006ea:	2012      	movs	r0, #18
 80006ec:	f001 fbeb 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40012400 	.word	0x40012400
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800
 8000704:	20000058 	.word	0x20000058
 8000708:	40020008 	.word	0x40020008

0800070c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a24      	ldr	r2, [pc, #144]	@ (80007b8 <HAL_CAN_MspInit+0xac>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d141      	bne.n	80007b0 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800072c:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <HAL_CAN_MspInit+0xb0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800075c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <HAL_CAN_MspInit+0xb4>)
 8000772:	f001 fd23 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <HAL_CAN_MspInit+0xb4>)
 800078c:	f001 fd16 	bl	80021bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2013      	movs	r0, #19
 8000796:	f001 fb7a 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800079a:	2013      	movs	r0, #19
 800079c:	f001 fb93 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2014      	movs	r0, #20
 80007a6:	f001 fb72 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f001 fb8b 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40006400 	.word	0x40006400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <HAL_I2C_MspInit+0x70>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d123      	bne.n	800082c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fc:	23c0      	movs	r3, #192	@ 0xc0
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	480b      	ldr	r0, [pc, #44]	@ (800083c <HAL_I2C_MspInit+0x78>)
 8000810:	f001 fcd4 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 800081a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800081e:	61d3      	str	r3, [r2, #28]
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_I2C_MspInit+0x74>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40021000 	.word	0x40021000
 800083c:	40010c00 	.word	0x40010c00

08000840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <HAL_TIM_Base_MspInit+0x34>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d10b      	bne.n	800086a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40000800 	.word	0x40000800
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f89c 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008d8:	4802      	ldr	r0, [pc, #8]	@ (80008e4 <DMA1_Channel1_IRQHandler+0x10>)
 80008da:	f001 fb69 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000058 	.word	0x20000058

080008e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <ADC1_2_IRQHandler+0x10>)
 80008ee:	f000 f9a3 	bl	8000c38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028

080008fc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000902:	f000 ffca 	bl	800189a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000009c 	.word	0x2000009c

08000910 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000916:	f000 ffc0 	bl	800189a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000009c 	.word	0x2000009c

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff fff8 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000936:	490c      	ldr	r1, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000938:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <LoopFillZerobss+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800094c:	4c09      	ldr	r4, [pc, #36]	@ (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f002 fe11 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fbf5 	bl	800014c <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08003614 	.word	0x08003614
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	200001b0 	.word	0x200001b0

08000978 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <CAN1_RX1_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f001 fa73 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe16 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fa8b 	bl	8001ee2 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009e4:	f001 fa53 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001ac 	.word	0x200001ac

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200001ac 	.word	0x200001ac

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e0be      	b.n	8000c28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d109      	bne.n	8000acc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fdb0 	bl	800062c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 fa7d 	bl	8000fcc <ADC_ConversionStop_Disable>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8099 	bne.w	8000c16 <HAL_ADC_Init+0x18e>
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8095 	bne.w	8000c16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000af4:	f023 0302 	bic.w	r3, r3, #2
 8000af8:	f043 0202 	orr.w	r2, r3, #2
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7b1b      	ldrb	r3, [r3, #12]
 8000b0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b20:	d003      	beq.n	8000b2a <HAL_ADC_Init+0xa2>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d102      	bne.n	8000b30 <HAL_ADC_Init+0xa8>
 8000b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2e:	e000      	b.n	8000b32 <HAL_ADC_Init+0xaa>
 8000b30:	2300      	movs	r3, #0
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7d1b      	ldrb	r3, [r3, #20]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d119      	bne.n	8000b74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7b1b      	ldrb	r3, [r3, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	035a      	lsls	r2, r3, #13
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	e00b      	b.n	8000b74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b60:	f043 0220 	orr.w	r2, r3, #32
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6c:	f043 0201 	orr.w	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <HAL_ADC_Init+0x1a8>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ba4:	d003      	beq.n	8000bae <HAL_ADC_Init+0x126>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d104      	bne.n	8000bb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	051b      	lsls	r3, r3, #20
 8000bb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_ADC_Init+0x1ac>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10b      	bne.n	8000bf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be6:	f023 0303 	bic.w	r3, r3, #3
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf2:	e018      	b.n	8000c26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf8:	f023 0312 	bic.w	r3, r3, #18
 8000bfc:	f043 0210 	orr.w	r2, r3, #16
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c08:	f043 0201 	orr.w	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c14:	e007      	b.n	8000c26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1a:	f043 0210 	orr.w	r2, r3, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	ffe1f7fd 	.word	0xffe1f7fd
 8000c34:	ff1f0efe 	.word	0xff1f0efe

08000c38 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d03e      	beq.n	8000cd8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d039      	beq.n	8000cd8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c8a:	d11d      	bne.n	8000cc8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d119      	bne.n	8000cc8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0220 	bic.w	r2, r2, #32
 8000ca2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc0:	f043 0201 	orr.w	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f874 	bl	8000db6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f06f 0212 	mvn.w	r2, #18
 8000cd6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d04d      	beq.n	8000d7e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d048      	beq.n	8000d7e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000d0e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000d12:	d012      	beq.n	8000d3a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d125      	bne.n	8000d6e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d2c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d30:	d11d      	bne.n	8000d6e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d119      	bne.n	8000d6e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d48:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f96d 	bl	800104e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f06f 020c 	mvn.w	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d012      	beq.n	8000dae <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00d      	beq.n	8000dae <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f812 	bl	8000dc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f06f 0201 	mvn.w	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d101      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x20>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e0dc      	b.n	8000fb6 <HAL_ADC_ConfigChannel+0x1da>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d81c      	bhi.n	8000e46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3b05      	subs	r3, #5
 8000e1e:	221f      	movs	r2, #31
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4019      	ands	r1, r3
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3b05      	subs	r3, #5
 8000e38:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e44:	e03c      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b0c      	cmp	r3, #12
 8000e4c:	d81c      	bhi.n	8000e88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b23      	subs	r3, #35	@ 0x23
 8000e60:	221f      	movs	r2, #31
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4019      	ands	r1, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3b23      	subs	r3, #35	@ 0x23
 8000e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e86:	e01b      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	3b41      	subs	r3, #65	@ 0x41
 8000e9a:	221f      	movs	r2, #31
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3b41      	subs	r3, #65	@ 0x41
 8000eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d91c      	bls.n	8000f02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68d9      	ldr	r1, [r3, #12]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b1e      	subs	r3, #30
 8000eda:	2207      	movs	r2, #7
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4019      	ands	r1, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	6898      	ldr	r0, [r3, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3b1e      	subs	r3, #30
 8000ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	e019      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6919      	ldr	r1, [r3, #16]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	2207      	movs	r2, #7
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4019      	ands	r1, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6898      	ldr	r0, [r3, #8]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b10      	cmp	r3, #16
 8000f3c:	d003      	beq.n	8000f46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f42:	2b11      	cmp	r3, #17
 8000f44:	d132      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d125      	bne.n	8000f9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d126      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d11a      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9a      	lsrs	r2, r3, #18
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f8c:	e002      	b.n	8000f94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f9      	bne.n	8000f8e <HAL_ADC_ConfigChannel+0x1b2>
 8000f9a:	e007      	b.n	8000fac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa0:	f043 0220 	orr.w	r2, r3, #32
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40012400 	.word	0x40012400
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	431bde83 	.word	0x431bde83

08000fcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12e      	bne.n	8001044 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fd19 	bl	8000a2c <HAL_GetTick>
 8000ffa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ffc:	e01b      	b.n	8001036 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ffe:	f7ff fd15 	bl	8000a2c <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d914      	bls.n	8001036 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10d      	bne.n	8001036 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e007      	b.n	8001046 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d0dc      	beq.n	8000ffe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0ed      	b.n	800124e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fb44 	bl	800070c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001094:	f7ff fcca 	bl	8000a2c <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800109a:	e012      	b.n	80010c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800109c:	f7ff fcc6 	bl	8000a2c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	d90b      	bls.n	80010c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2205      	movs	r2, #5
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0c5      	b.n	800124e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0e5      	beq.n	800109c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0202 	bic.w	r2, r2, #2
 80010de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e0:	f7ff fca4 	bl	8000a2c <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e6:	e012      	b.n	800110e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e8:	f7ff fca0 	bl	8000a2c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d90b      	bls.n	800110e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e09f      	b.n	800124e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e5      	bne.n	80010e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7e1b      	ldrb	r3, [r3, #24]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7e5b      	ldrb	r3, [r3, #25]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e007      	b.n	8001170 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7e9b      	ldrb	r3, [r3, #26]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e007      	b.n	800119a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0220 	bic.w	r2, r2, #32
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7edb      	ldrb	r3, [r3, #27]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d108      	bne.n	80011b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0210 	bic.w	r2, r2, #16
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0210 	orr.w	r2, r2, #16
 80011c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7f1b      	ldrb	r3, [r3, #28]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d108      	bne.n	80011de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0208 	orr.w	r2, r2, #8
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e007      	b.n	80011ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0208 	bic.w	r2, r2, #8
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7f5b      	ldrb	r3, [r3, #29]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0204 	orr.w	r2, r2, #4
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e007      	b.n	8001218 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0204 	bic.w	r2, r2, #4
 8001216:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	ea42 0103 	orr.w	r1, r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001256:	b480      	push	{r7}
 8001258:	b087      	sub	sp, #28
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800126e:	7cfb      	ldrb	r3, [r7, #19]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d003      	beq.n	800127c <HAL_CAN_ConfigFilter+0x26>
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	2b02      	cmp	r3, #2
 8001278:	f040 80aa 	bne.w	80013d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001282:	f043 0201 	orr.w	r2, r3, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	2201      	movs	r2, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d123      	bne.n	80012fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3248      	adds	r2, #72	@ 0x48
 80012de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	3348      	adds	r3, #72	@ 0x48
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d122      	bne.n	800134c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001326:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3248      	adds	r2, #72	@ 0x48
 800132c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001340:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001342:	6979      	ldr	r1, [r7, #20]
 8001344:	3348      	adds	r3, #72	@ 0x48
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001366:	e007      	b.n	8001378 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001392:	e007      	b.n	80013a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013c2:	f023 0201 	bic.w	r2, r3, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e006      	b.n	80013de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
  }
}
 80013de:	4618      	mov	r0, r3
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d12e      	bne.n	800145a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001414:	f7ff fb0a 	bl	8000a2c <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800141a:	e012      	b.n	8001442 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800141c:	f7ff fb06 	bl	8000a2c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d90b      	bls.n	8001442 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e012      	b.n	8001468 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e5      	bne.n	800141c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e006      	b.n	8001468 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d003      	beq.n	800149c <HAL_CAN_AddTxMessage+0x2c>
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	2b02      	cmp	r3, #2
 8001498:	f040 80ad 	bne.w	80015f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8095 	beq.w	80015e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	0e1b      	lsrs	r3, r3, #24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10d      	bne.n	80014f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	6809      	ldr	r1, [r1, #0]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3318      	adds	r3, #24
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	440b      	add	r3, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00f      	b.n	8001514 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001508:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3318      	adds	r3, #24
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3318      	adds	r3, #24
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	3304      	adds	r3, #4
 8001526:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	7d1b      	ldrb	r3, [r3, #20]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d111      	bne.n	8001554 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6811      	ldr	r1, [r2, #0]
 8001544:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3318      	adds	r3, #24
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	440b      	add	r3, r1
 8001550:	3304      	adds	r3, #4
 8001552:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3307      	adds	r3, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	061a      	lsls	r2, r3, #24
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3306      	adds	r3, #6
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3305      	adds	r3, #5
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4313      	orrs	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	3204      	adds	r2, #4
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	4610      	mov	r0, r2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	6811      	ldr	r1, [r2, #0]
 800157c:	ea43 0200 	orr.w	r2, r3, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	440b      	add	r3, r1
 8001586:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800158a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3303      	adds	r3, #3
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	061a      	lsls	r2, r3, #24
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3302      	adds	r3, #2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	4313      	orrs	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	4610      	mov	r0, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	ea43 0200 	orr.w	r2, r3, r0
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3318      	adds	r3, #24
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6811      	ldr	r1, [r2, #0]
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e00e      	b.n	8001604 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e006      	b.n	8001604 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	3724      	adds	r7, #36	@ 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d003      	beq.n	8001632 <HAL_CAN_GetRxMessage+0x24>
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 8103 	bne.w	8001838 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10e      	bne.n	8001656 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0f7      	b.n	8001846 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0e8      	b.n	8001846 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	331b      	adds	r3, #27
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0204 	and.w	r2, r3, #4
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	331b      	adds	r3, #27
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	331b      	adds	r3, #27
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	331b      	adds	r3, #27
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0202 	and.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	331b      	adds	r3, #27
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2208      	movs	r2, #8
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	e00b      	b.n	8001712 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	331b      	adds	r3, #27
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	331b      	adds	r3, #27
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	3304      	adds	r3, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	331b      	adds	r3, #27
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0c1b      	lsrs	r3, r3, #16
 800173c:	b29a      	uxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0a1a      	lsrs	r2, r3, #8
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0c1a      	lsrs	r2, r3, #16
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3302      	adds	r3, #2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	4413      	add	r3, r2
 8001796:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e1a      	lsrs	r2, r3, #24
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3303      	adds	r3, #3
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3304      	adds	r3, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0a1a      	lsrs	r2, r3, #8
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3305      	adds	r3, #5
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0c1a      	lsrs	r2, r3, #16
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3306      	adds	r3, #6
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e1a      	lsrs	r2, r3, #24
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3307      	adds	r3, #7
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e007      	b.n	8001834 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e006      	b.n	8001846 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001860:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d002      	beq.n	800186e <HAL_CAN_ActivateNotification+0x1e>
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d109      	bne.n	8001882 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6959      	ldr	r1, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e006      	b.n	8001890 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b08a      	sub	sp, #40	@ 0x28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d07c      	beq.n	80019da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f983 	bl	8001c08 <HAL_CAN_TxMailbox0CompleteCallback>
 8001902:	e016      	b.n	8001932 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
 8001916:	e00c      	b.n	8001932 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	e002      	b.n	8001932 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f986 	bl	8001c3e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d024      	beq.n	8001986 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001944:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f962 	bl	8001c1a <HAL_CAN_TxMailbox1CompleteCallback>
 8001956:	e016      	b.n	8001986 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	e00c      	b.n	8001986 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
 800197e:	e002      	b.n	8001986 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f965 	bl	8001c50 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d024      	beq.n	80019da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001998:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f941 	bl	8001c2c <HAL_CAN_TxMailbox2CompleteCallback>
 80019aa:	e016      	b.n	80019da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019be:	e00c      	b.n	80019da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	e002      	b.n	80019da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f944 	bl	8001c62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2208      	movs	r2, #8
 8001a18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f92a 	bl	8001c74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fdad 	bl	8000598 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00c      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00b      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f90a 	bl	8001c98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8f2 	bl	8001c86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2210      	movs	r2, #16
 8001abc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8f3 	bl	8001caa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2208      	movs	r2, #8
 8001ade:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8eb 	bl	8001cbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d07b      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d072      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d043      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03e      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b68:	2b60      	cmp	r3, #96	@ 0x60
 8001b6a:	d02b      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x32a>
 8001b6c:	2b60      	cmp	r3, #96	@ 0x60
 8001b6e:	d82e      	bhi.n	8001bce <HAL_CAN_IRQHandler+0x334>
 8001b70:	2b50      	cmp	r3, #80	@ 0x50
 8001b72:	d022      	beq.n	8001bba <HAL_CAN_IRQHandler+0x320>
 8001b74:	2b50      	cmp	r3, #80	@ 0x50
 8001b76:	d82a      	bhi.n	8001bce <HAL_CAN_IRQHandler+0x334>
 8001b78:	2b40      	cmp	r3, #64	@ 0x40
 8001b7a:	d019      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x316>
 8001b7c:	2b40      	cmp	r3, #64	@ 0x40
 8001b7e:	d826      	bhi.n	8001bce <HAL_CAN_IRQHandler+0x334>
 8001b80:	2b30      	cmp	r3, #48	@ 0x30
 8001b82:	d010      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x30c>
 8001b84:	2b30      	cmp	r3, #48	@ 0x30
 8001b86:	d822      	bhi.n	8001bce <HAL_CAN_IRQHandler+0x334>
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d002      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x2f8>
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d005      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b90:	e01d      	b.n	8001bce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b9a:	e019      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ba4:	e014      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bae:	e00f      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bb8:	e00a      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bc2:	e005      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bcc:	e000      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2204      	movs	r2, #4
 8001be6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f867 	bl	8001cce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	@ 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4906      	ldr	r1, [pc, #24]	@ (8001d78 <__NVIC_EnableIRQ+0x34>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e58:	f7ff ff90 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff2d 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff42 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff90 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5f 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff35 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e043      	b.n	8001f9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_DMA_Init+0xa8>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_DMA_Init+0xac>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_DMA_Init+0xb0>)
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f46:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	bffdfff8 	.word	0xbffdfff8
 8001fa8:	cccccccd 	.word	0xcccccccd
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	2204      	movs	r2, #4
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d04f      	beq.n	8002078 <HAL_DMA_IRQHandler+0xc8>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04a      	beq.n	8002078 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a66      	ldr	r2, [pc, #408]	@ (80021a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d029      	beq.n	800205e <HAL_DMA_IRQHandler+0xae>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a65      	ldr	r2, [pc, #404]	@ (80021a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d022      	beq.n	800205a <HAL_DMA_IRQHandler+0xaa>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a63      	ldr	r2, [pc, #396]	@ (80021a8 <HAL_DMA_IRQHandler+0x1f8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01a      	beq.n	8002054 <HAL_DMA_IRQHandler+0xa4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a62      	ldr	r2, [pc, #392]	@ (80021ac <HAL_DMA_IRQHandler+0x1fc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0x9e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a60      	ldr	r2, [pc, #384]	@ (80021b0 <HAL_DMA_IRQHandler+0x200>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00a      	beq.n	8002048 <HAL_DMA_IRQHandler+0x98>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5f      	ldr	r2, [pc, #380]	@ (80021b4 <HAL_DMA_IRQHandler+0x204>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <HAL_DMA_IRQHandler+0x92>
 800203c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002040:	e00e      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 8002042:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002046:	e00b      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 8002048:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800204c:	e008      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 800204e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002052:	e005      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 8002054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002058:	e002      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 800205a:	2340      	movs	r3, #64	@ 0x40
 800205c:	e000      	b.n	8002060 <HAL_DMA_IRQHandler+0xb0>
 800205e:	2304      	movs	r3, #4
 8002060:	4a55      	ldr	r2, [pc, #340]	@ (80021b8 <HAL_DMA_IRQHandler+0x208>)
 8002062:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8094 	beq.w	8002196 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002076:	e08e      	b.n	8002196 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	2202      	movs	r2, #2
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d056      	beq.n	8002136 <HAL_DMA_IRQHandler+0x186>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d051      	beq.n	8002136 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 020a 	bic.w	r2, r2, #10
 80020ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a38      	ldr	r2, [pc, #224]	@ (80021a0 <HAL_DMA_IRQHandler+0x1f0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d029      	beq.n	8002116 <HAL_DMA_IRQHandler+0x166>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a37      	ldr	r2, [pc, #220]	@ (80021a4 <HAL_DMA_IRQHandler+0x1f4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <HAL_DMA_IRQHandler+0x162>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a35      	ldr	r2, [pc, #212]	@ (80021a8 <HAL_DMA_IRQHandler+0x1f8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01a      	beq.n	800210c <HAL_DMA_IRQHandler+0x15c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a34      	ldr	r2, [pc, #208]	@ (80021ac <HAL_DMA_IRQHandler+0x1fc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d012      	beq.n	8002106 <HAL_DMA_IRQHandler+0x156>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a32      	ldr	r2, [pc, #200]	@ (80021b0 <HAL_DMA_IRQHandler+0x200>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00a      	beq.n	8002100 <HAL_DMA_IRQHandler+0x150>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a31      	ldr	r2, [pc, #196]	@ (80021b4 <HAL_DMA_IRQHandler+0x204>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_DMA_IRQHandler+0x14a>
 80020f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020f8:	e00e      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 80020fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020fe:	e00b      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 8002100:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002104:	e008      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 8002106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800210a:	e005      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 800210c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002110:	e002      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 8002112:	2320      	movs	r3, #32
 8002114:	e000      	b.n	8002118 <HAL_DMA_IRQHandler+0x168>
 8002116:	2302      	movs	r3, #2
 8002118:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <HAL_DMA_IRQHandler+0x208>)
 800211a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d034      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002134:	e02f      	b.n	8002196 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d028      	beq.n	8002198 <HAL_DMA_IRQHandler+0x1e8>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d023      	beq.n	8002198 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 020e 	bic.w	r2, r2, #14
 800215e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
    }
  }
  return;
 8002196:	bf00      	nop
 8002198:	bf00      	nop
}
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020008 	.word	0x40020008
 80021a4:	4002001c 	.word	0x4002001c
 80021a8:	40020030 	.word	0x40020030
 80021ac:	40020044 	.word	0x40020044
 80021b0:	40020058 	.word	0x40020058
 80021b4:	4002006c 	.word	0x4002006c
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b08b      	sub	sp, #44	@ 0x2c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	e169      	b.n	80024a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021d0:	2201      	movs	r2, #1
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8158 	bne.w	800249e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a9a      	ldr	r2, [pc, #616]	@ (800245c <HAL_GPIO_Init+0x2a0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d05e      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
 80021f8:	4a98      	ldr	r2, [pc, #608]	@ (800245c <HAL_GPIO_Init+0x2a0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d875      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 80021fe:	4a98      	ldr	r2, [pc, #608]	@ (8002460 <HAL_GPIO_Init+0x2a4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d058      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
 8002204:	4a96      	ldr	r2, [pc, #600]	@ (8002460 <HAL_GPIO_Init+0x2a4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d86f      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 800220a:	4a96      	ldr	r2, [pc, #600]	@ (8002464 <HAL_GPIO_Init+0x2a8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d052      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
 8002210:	4a94      	ldr	r2, [pc, #592]	@ (8002464 <HAL_GPIO_Init+0x2a8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d869      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 8002216:	4a94      	ldr	r2, [pc, #592]	@ (8002468 <HAL_GPIO_Init+0x2ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d04c      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
 800221c:	4a92      	ldr	r2, [pc, #584]	@ (8002468 <HAL_GPIO_Init+0x2ac>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d863      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 8002222:	4a92      	ldr	r2, [pc, #584]	@ (800246c <HAL_GPIO_Init+0x2b0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d046      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
 8002228:	4a90      	ldr	r2, [pc, #576]	@ (800246c <HAL_GPIO_Init+0x2b0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d85d      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 800222e:	2b12      	cmp	r3, #18
 8002230:	d82a      	bhi.n	8002288 <HAL_GPIO_Init+0xcc>
 8002232:	2b12      	cmp	r3, #18
 8002234:	d859      	bhi.n	80022ea <HAL_GPIO_Init+0x12e>
 8002236:	a201      	add	r2, pc, #4	@ (adr r2, 800223c <HAL_GPIO_Init+0x80>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	080022b7 	.word	0x080022b7
 8002240:	08002291 	.word	0x08002291
 8002244:	080022a3 	.word	0x080022a3
 8002248:	080022e5 	.word	0x080022e5
 800224c:	080022eb 	.word	0x080022eb
 8002250:	080022eb 	.word	0x080022eb
 8002254:	080022eb 	.word	0x080022eb
 8002258:	080022eb 	.word	0x080022eb
 800225c:	080022eb 	.word	0x080022eb
 8002260:	080022eb 	.word	0x080022eb
 8002264:	080022eb 	.word	0x080022eb
 8002268:	080022eb 	.word	0x080022eb
 800226c:	080022eb 	.word	0x080022eb
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022eb 	.word	0x080022eb
 8002278:	080022eb 	.word	0x080022eb
 800227c:	080022eb 	.word	0x080022eb
 8002280:	08002299 	.word	0x08002299
 8002284:	080022ad 	.word	0x080022ad
 8002288:	4a79      	ldr	r2, [pc, #484]	@ (8002470 <HAL_GPIO_Init+0x2b4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800228e:	e02c      	b.n	80022ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e029      	b.n	80022ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	3304      	adds	r3, #4
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e024      	b.n	80022ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	3308      	adds	r3, #8
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e01f      	b.n	80022ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	330c      	adds	r3, #12
 80022b2:	623b      	str	r3, [r7, #32]
          break;
 80022b4:	e01a      	b.n	80022ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022be:	2304      	movs	r3, #4
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e013      	b.n	80022ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022cc:	2308      	movs	r3, #8
 80022ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	611a      	str	r2, [r3, #16]
          break;
 80022d6:	e009      	b.n	80022ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	615a      	str	r2, [r3, #20]
          break;
 80022e2:	e003      	b.n	80022ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x130>
          break;
 80022ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	@ 0xff
 80022f0:	d801      	bhi.n	80022f6 <HAL_GPIO_Init+0x13a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	e001      	b.n	80022fa <HAL_GPIO_Init+0x13e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2bff      	cmp	r3, #255	@ 0xff
 8002300:	d802      	bhi.n	8002308 <HAL_GPIO_Init+0x14c>
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	e002      	b.n	800230e <HAL_GPIO_Init+0x152>
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	3b08      	subs	r3, #8
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	210f      	movs	r1, #15
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	6a39      	ldr	r1, [r7, #32]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	431a      	orrs	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80b1 	beq.w	800249e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800233c:	4b4d      	ldr	r3, [pc, #308]	@ (8002474 <HAL_GPIO_Init+0x2b8>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a4c      	ldr	r2, [pc, #304]	@ (8002474 <HAL_GPIO_Init+0x2b8>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b4a      	ldr	r3, [pc, #296]	@ (8002474 <HAL_GPIO_Init+0x2b8>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002354:	4a48      	ldr	r2, [pc, #288]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a40      	ldr	r2, [pc, #256]	@ (800247c <HAL_GPIO_Init+0x2c0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_GPIO_Init+0x1ec>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3f      	ldr	r2, [pc, #252]	@ (8002480 <HAL_GPIO_Init+0x2c4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00d      	beq.n	80023a4 <HAL_GPIO_Init+0x1e8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3e      	ldr	r2, [pc, #248]	@ (8002484 <HAL_GPIO_Init+0x2c8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <HAL_GPIO_Init+0x1e4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3d      	ldr	r2, [pc, #244]	@ (8002488 <HAL_GPIO_Init+0x2cc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_GPIO_Init+0x1e0>
 8002398:	2303      	movs	r3, #3
 800239a:	e006      	b.n	80023aa <HAL_GPIO_Init+0x1ee>
 800239c:	2304      	movs	r3, #4
 800239e:	e004      	b.n	80023aa <HAL_GPIO_Init+0x1ee>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e002      	b.n	80023aa <HAL_GPIO_Init+0x1ee>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_GPIO_Init+0x1ee>
 80023a8:	2300      	movs	r3, #0
 80023aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ac:	f002 0203 	and.w	r2, r2, #3
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	4093      	lsls	r3, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ba:	492f      	ldr	r1, [pc, #188]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d4:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	492c      	ldr	r1, [pc, #176]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b2a      	ldr	r3, [pc, #168]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4928      	ldr	r1, [pc, #160]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b23      	ldr	r3, [pc, #140]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4922      	ldr	r1, [pc, #136]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	43db      	mvns	r3, r3
 8002412:	491e      	ldr	r1, [pc, #120]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002414:	4013      	ands	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4918      	ldr	r1, [pc, #96]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002432:	4b16      	ldr	r3, [pc, #88]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	4914      	ldr	r1, [pc, #80]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 800243c:	4013      	ands	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d021      	beq.n	8002490 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	490e      	ldr	r1, [pc, #56]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e021      	b.n	800249e <HAL_GPIO_Init+0x2e2>
 800245a:	bf00      	nop
 800245c:	10320000 	.word	0x10320000
 8002460:	10310000 	.word	0x10310000
 8002464:	10220000 	.word	0x10220000
 8002468:	10210000 	.word	0x10210000
 800246c:	10120000 	.word	0x10120000
 8002470:	10110000 	.word	0x10110000
 8002474:	40021000 	.word	0x40021000
 8002478:	40010000 	.word	0x40010000
 800247c:	40010800 	.word	0x40010800
 8002480:	40010c00 	.word	0x40010c00
 8002484:	40011000 	.word	0x40011000
 8002488:	40011400 	.word	0x40011400
 800248c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	43db      	mvns	r3, r3
 8002498:	4909      	ldr	r1, [pc, #36]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 800249a:	4013      	ands	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	3301      	adds	r3, #1
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f ae8e 	bne.w	80021d0 <HAL_GPIO_Init+0x14>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	372c      	adds	r7, #44	@ 0x2c
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e12b      	b.n	800272e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f96a 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002528:	f000 fcda 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 800252c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a81      	ldr	r2, [pc, #516]	@ (8002738 <HAL_I2C_Init+0x274>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d807      	bhi.n	8002548 <HAL_I2C_Init+0x84>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a80      	ldr	r2, [pc, #512]	@ (800273c <HAL_I2C_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e006      	b.n	8002556 <HAL_I2C_Init+0x92>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a7d      	ldr	r2, [pc, #500]	@ (8002740 <HAL_I2C_Init+0x27c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e7      	b.n	800272e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a78      	ldr	r2, [pc, #480]	@ (8002744 <HAL_I2C_Init+0x280>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a6a      	ldr	r2, [pc, #424]	@ (8002738 <HAL_I2C_Init+0x274>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d802      	bhi.n	8002598 <HAL_I2C_Init+0xd4>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	e009      	b.n	80025ac <HAL_I2C_Init+0xe8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4a69      	ldr	r2, [pc, #420]	@ (8002748 <HAL_I2C_Init+0x284>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	3301      	adds	r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	495c      	ldr	r1, [pc, #368]	@ (8002738 <HAL_I2C_Init+0x274>)
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d819      	bhi.n	8002600 <HAL_I2C_Init+0x13c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e59      	subs	r1, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_I2C_Init+0x138>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e59      	subs	r1, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	e051      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 80025fc:	2304      	movs	r3, #4
 80025fe:	e04f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <HAL_I2C_Init+0x168>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e012      	b.n	8002652 <HAL_I2C_Init+0x18e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x196>
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <HAL_I2C_Init+0x1bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e58      	subs	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6911      	ldr	r1, [r2, #16]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	000186a0 	.word	0x000186a0
 800273c:	001e847f 	.word	0x001e847f
 8002740:	003d08ff 	.word	0x003d08ff
 8002744:	431bde83 	.word	0x431bde83
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e272      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8087 	beq.w	800287a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800276c:	4b92      	ldr	r3, [pc, #584]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00c      	beq.n	8002792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002778:	4b8f      	ldr	r3, [pc, #572]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d112      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
 8002784:	4b8c      	ldr	r3, [pc, #560]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002790:	d10b      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	4b89      	ldr	r3, [pc, #548]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06c      	beq.n	8002878 <HAL_RCC_OscConfig+0x12c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d168      	bne.n	8002878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e24c      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x76>
 80027b4:	4b80      	ldr	r3, [pc, #512]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7f      	ldr	r2, [pc, #508]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e02e      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b7b      	ldr	r3, [pc, #492]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7a      	ldr	r2, [pc, #488]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b78      	ldr	r3, [pc, #480]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a77      	ldr	r2, [pc, #476]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0xbc>
 80027ee:	4b72      	ldr	r3, [pc, #456]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a71      	ldr	r2, [pc, #452]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6f      	ldr	r3, [pc, #444]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6e      	ldr	r2, [pc, #440]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 8002808:	4b6b      	ldr	r3, [pc, #428]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6a      	ldr	r2, [pc, #424]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b68      	ldr	r3, [pc, #416]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a67      	ldr	r2, [pc, #412]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe f900 	bl	8000a2c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe f8fc 	bl	8000a2c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e200      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5d      	ldr	r3, [pc, #372]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xe4>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe f8ec 	bl	8000a2c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe f8e8 	bl	8000a2c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1ec      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b53      	ldr	r3, [pc, #332]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x10c>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002886:	4b4c      	ldr	r3, [pc, #304]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002892:	4b49      	ldr	r3, [pc, #292]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
 800289e:	4b46      	ldr	r3, [pc, #280]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b43      	ldr	r3, [pc, #268]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c0      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3d      	ldr	r3, [pc, #244]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4939      	ldr	r1, [pc, #228]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe f8a1 	bl	8000a2c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe f89d 	bl	8000a2c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a1      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2d      	ldr	r3, [pc, #180]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4927      	ldr	r1, [pc, #156]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b26      	ldr	r3, [pc, #152]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f880 	bl	8000a2c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe f87c 	bl	8000a2c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e180      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03a      	beq.n	80029d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d019      	beq.n	8002996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe f860 	bl	8000a2c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe f85c 	bl	8000a2c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e160      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298e:	2001      	movs	r0, #1
 8002990:	f000 faba 	bl	8002f08 <RCC_Delay>
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7fe f846 	bl	8000a2c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe f842 	bl	8000a2c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e146      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	42420000 	.word	0x42420000
 80029c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b92      	ldr	r3, [pc, #584]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e9      	bne.n	80029a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a6 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a87      	ldr	r2, [pc, #540]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b85      	ldr	r3, [pc, #532]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b82      	ldr	r3, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x4c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b7f      	ldr	r3, [pc, #508]	@ (8002c14 <HAL_RCC_OscConfig+0x4c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c14 <HAL_RCC_OscConfig+0x4c8>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7fe f803 	bl	8000a2c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fd ffff 	bl	8000a2c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	@ 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e103      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b75      	ldr	r3, [pc, #468]	@ (8002c14 <HAL_RCC_OscConfig+0x4c8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x312>
 8002a50:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x334>
 8002a66:	4b6a      	ldr	r3, [pc, #424]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b67      	ldr	r3, [pc, #412]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a66      	ldr	r2, [pc, #408]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x356>
 8002a88:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a60      	ldr	r2, [pc, #384]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	4b5e      	ldr	r3, [pc, #376]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a5d      	ldr	r2, [pc, #372]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	4b58      	ldr	r3, [pc, #352]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a57      	ldr	r2, [pc, #348]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fd ffb3 	bl	8000a2c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fd ffaf 	bl	8000a2c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0b1      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x37e>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fd ff9d 	bl	8000a2c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fd ff99 	bl	8000a2c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e09b      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a3b      	ldr	r2, [pc, #236]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8087 	beq.w	8002c42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d061      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d146      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b33      	ldr	r3, [pc, #204]	@ (8002c18 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fd ff6d 	bl	8000a2c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fd ff69 	bl	8000a2c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e06d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4921      	ldr	r1, [pc, #132]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b90:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a19      	ldr	r1, [r3, #32]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	491b      	ldr	r1, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fd ff3d 	bl	8000a2c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fd ff39 	bl	8000a2c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46a>
 8002bd4:	e035      	b.n	8002c42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fd ff26 	bl	8000a2c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fd ff22 	bl	8000a2c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e026      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x498>
 8002c02:	e01e      	b.n	8002c42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e019      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x500>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d0      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b67      	ldr	r3, [pc, #412]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	4965      	ldr	r1, [pc, #404]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d040      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e073      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06b      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4936      	ldr	r1, [pc, #216]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fd fe74 	bl	8000a2c <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fd fe70 	bl	8000a2c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e053      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d210      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4922      	ldr	r1, [pc, #136]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dca:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490a      	ldr	r1, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RCC_ClockConfig+0x1cc>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1d0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fdd2 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	080035e0 	.word	0x080035e0
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x30>
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x36>
 8002e52:	e027      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e56:	613b      	str	r3, [r7, #16]
      break;
 8002e58:	e027      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0c9b      	lsrs	r3, r3, #18
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a17      	ldr	r2, [pc, #92]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0c5b      	lsrs	r3, r3, #17
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e004      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea6:	613b      	str	r3, [r7, #16]
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	693b      	ldr	r3, [r7, #16]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	007a1200 	.word	0x007a1200
 8002ec0:	080035f8 	.word	0x080035f8
 8002ec4:	08003608 	.word	0x08003608
 8002ec8:	003d0900 	.word	0x003d0900

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	20000000 	.word	0x20000000

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee4:	f7ff fff2 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	080035f0 	.word	0x080035f0

08002f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <RCC_Delay+0x34>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <RCC_Delay+0x38>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0a5b      	lsrs	r3, r3, #9
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f24:	bf00      	nop
  }
  while (Delay --);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e5a      	subs	r2, r3, #1
 8002f2a:	60fa      	str	r2, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f9      	bne.n	8002f24 <RCC_Delay+0x1c>
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d07d      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f64:	4b4f      	ldr	r3, [pc, #316]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b4c      	ldr	r3, [pc, #304]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
 8002f7c:	4b49      	ldr	r3, [pc, #292]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b46      	ldr	r3, [pc, #280]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d118      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f98:	4b43      	ldr	r3, [pc, #268]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a42      	ldr	r2, [pc, #264]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa4:	f7fd fd42 	bl	8000a2c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fd fd3e 	bl	8000a2c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e06d      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d02e      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d027      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ffe:	4a29      	ldr	r2, [pc, #164]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d014      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd fd0d 	bl	8000a2c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fd fd09 	bl	8000a2c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e036      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ee      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003038:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4917      	ldr	r1, [pc, #92]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	4313      	orrs	r3, r2
 8003048:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003050:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	490b      	ldr	r1, [pc, #44]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42420440 	.word	0x42420440

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e041      	b.n	8003146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fbb2 	bl	8000840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 f870 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003162:	2302      	movs	r3, #2
 8003164:	e031      	b.n	80031ca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f88d 	bl	8003298 <TIM_SlaveTimer_SetConfig>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e018      	b.n	80031ca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a29      	ldr	r2, [pc, #164]	@ (800328c <TIM_Base_SetConfig+0xb8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <TIM_Base_SetConfig+0xbc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <TIM_Base_SetConfig+0xc0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <TIM_Base_SetConfig+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <TIM_Base_SetConfig+0xbc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <TIM_Base_SetConfig+0xc0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a07      	ldr	r2, [pc, #28]	@ (800328c <TIM_Base_SetConfig+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d103      	bne.n	800327c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	615a      	str	r2, [r3, #20]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800

08003298 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b70      	cmp	r3, #112	@ 0x70
 80032e0:	d01a      	beq.n	8003318 <TIM_SlaveTimer_SetConfig+0x80>
 80032e2:	2b70      	cmp	r3, #112	@ 0x70
 80032e4:	d860      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 80032e6:	2b60      	cmp	r3, #96	@ 0x60
 80032e8:	d054      	beq.n	8003394 <TIM_SlaveTimer_SetConfig+0xfc>
 80032ea:	2b60      	cmp	r3, #96	@ 0x60
 80032ec:	d85c      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 80032ee:	2b50      	cmp	r3, #80	@ 0x50
 80032f0:	d046      	beq.n	8003380 <TIM_SlaveTimer_SetConfig+0xe8>
 80032f2:	2b50      	cmp	r3, #80	@ 0x50
 80032f4:	d858      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d019      	beq.n	800332e <TIM_SlaveTimer_SetConfig+0x96>
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d854      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 80032fe:	2b30      	cmp	r3, #48	@ 0x30
 8003300:	d055      	beq.n	80033ae <TIM_SlaveTimer_SetConfig+0x116>
 8003302:	2b30      	cmp	r3, #48	@ 0x30
 8003304:	d850      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 8003306:	2b20      	cmp	r3, #32
 8003308:	d051      	beq.n	80033ae <TIM_SlaveTimer_SetConfig+0x116>
 800330a:	2b20      	cmp	r3, #32
 800330c:	d84c      	bhi.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04d      	beq.n	80033ae <TIM_SlaveTimer_SetConfig+0x116>
 8003312:	2b10      	cmp	r3, #16
 8003314:	d04b      	beq.n	80033ae <TIM_SlaveTimer_SetConfig+0x116>
 8003316:	e047      	b.n	80033a8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003328:	f000 f8a4 	bl	8003474 <TIM_ETR_SetConfig>
      break;
 800332c:	e040      	b.n	80033b0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d101      	bne.n	800333a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e03b      	b.n	80033b2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003360:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
      break;
 800337e:	e017      	b.n	80033b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338c:	461a      	mov	r2, r3
 800338e:	f000 f814 	bl	80033ba <TIM_TI1_ConfigInputStage>
      break;
 8003392:	e00d      	b.n	80033b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a0:	461a      	mov	r2, r3
 80033a2:	f000 f838 	bl	8003416 <TIM_TI2_ConfigInputStage>
      break;
 80033a6:	e003      	b.n	80033b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
      break;
 80033ac:	e000      	b.n	80033b0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80033ae:	bf00      	nop
  }

  return status;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0201 	bic.w	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 030a 	bic.w	r3, r3, #10
 80033f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003416:	b480      	push	{r7}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	031b      	lsls	r3, r3, #12
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800348e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	431a      	orrs	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e046      	b.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a16      	ldr	r2, [pc, #88]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d009      	beq.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a10      	ldr	r2, [pc, #64]	@ (800356c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10c      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800

08003570 <memset>:
 8003570:	4603      	mov	r3, r0
 8003572:	4402      	add	r2, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	2600      	movs	r6, #0
 8003584:	4d0c      	ldr	r5, [pc, #48]	@ (80035b8 <__libc_init_array+0x38>)
 8003586:	4c0d      	ldr	r4, [pc, #52]	@ (80035bc <__libc_init_array+0x3c>)
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	f000 f81a 	bl	80035c8 <_init>
 8003594:	2600      	movs	r6, #0
 8003596:	4d0a      	ldr	r5, [pc, #40]	@ (80035c0 <__libc_init_array+0x40>)
 8003598:	4c0a      	ldr	r4, [pc, #40]	@ (80035c4 <__libc_init_array+0x44>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	0800360c 	.word	0x0800360c
 80035bc:	0800360c 	.word	0x0800360c
 80035c0:	0800360c 	.word	0x0800360c
 80035c4:	08003610 	.word	0x08003610

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
